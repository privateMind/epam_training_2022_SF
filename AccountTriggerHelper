public class AccountTriggerHelper {
	 
    @future
    public static void createTasksFromAccounts (Set<Id> ids){
        List<Task> tasks = new List<Task>();
        for(Id id : ids){
			tasks.add(new Task(
                    Subject = 'New task',
                	Is_Synced__c = false,
				    WhatId = id
                )
            );
        }
        insert tasks;
    }
    @future
    public static void syncContactsFromAccounts (Set<Id> ids){
        List<Contact> contacts = [SELECT Id FROM Contact WHERE AccountId IN :ids]; 
        for (Contact contact : contacts){
            contact.Is_Synced__c = false;
            contact.Processed_By_Future__c = true;
        }
        update contacts;
    }
    // next method's input is new map and old map, output is Set of Id of Changed account's BillingAddress 
    public static Set<Id> selectAccountsWithChangedBillingAddress (Map<Id,Account> newMap,Map<Id,Account> oldMap){
    	Set<Id> modifiedAccountsIds= new Set<Id>();	
        for (Id id : newMap.keySet()){
            System.debug(newMap.get(id));
            if (newMap.get(id).BillingStreet != oldMap.get(id).BillingStreet ||
                newMap.get(id).BillingCity!= oldMap.get(id).BillingCity ||
               	newMap.get(id).BillingState!= oldMap.get(id).BillingState ||
                newMap.get(id).BillingPostalCode!= oldMap.get(id).BillingPostalCode ||
                newMap.get(id).BillingCountry!= oldMap.get(id).BillingCountry)
            {
                modifiedAccountsIds.add(id);
            }
        }
        return modifiedAccountsIds;
    }
}
